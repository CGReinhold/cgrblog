{"version":3,"sources":["Constants.tsx","CodeInput.tsx","locales/en.tsx","locales/pt.tsx","useLabels.tsx","LevelManager.tsx","Phrase.tsx","PhraseContainer.tsx","App.tsx","index.tsx"],"names":["LEVELS","COLORS","CodeInput","level","input","onInput","onEnter","levelSize","length","className","slice","map","l","autoFocus","placeholder","value","onChange","e","target","split","replace","onKeyUp","key","shiftKey","rows","en","LEVEL_DESCRIPTIONS","MOBILE_WARNING","NO_LEVEL_DESCRIPTION","START_BUTTON","NEXT_BUTTON","CHECK_BUTTON","GIVE_SOLUTION_BUTTON","YOU_WON","WAS_WRONG","CHANGE_STYLE","HOVER_TO_SEE","PHRASE","pt","useLabels","language","LevelManager","onNext","onPrevious","useState","setInput","showResult","setShowResult","wasWrong","setWasWrong","won","useEffect","document","documentElement","style","setProperty","handleNext","compareWords","first","second","replaceAll","toUpperCase","handleValidate","result","lines","every","r","some","isValid","onClick","join","Phrase","levels","Array","from","_","i","classes","classNames","PhraseContainer","App","setLevel","setLanguage","getLanguageClass","lang","undefined","isMobile","href","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.29d1183b.chunk.js","sourcesContent":["export const LEVELS = [\r\n  'font-family: sans-serif;',\r\n  'color: white;',\r\n  'font-size: 20px;',\r\n  'text-transform: uppercase;',\r\n  'font-kerning: none;',\r\n  'font-variant-caps: all-small-caps;',\r\n  'font-weight: bold;',\r\n  'font-style: italic;',\r\n  'text-decoration: underline;',\r\n  'letter-spacing: 1px;',\r\n  'word-spacing: 5px;',\r\n  'line-height: 1.5;',\r\n  'text-indent: 20px;',\r\n  'text-align: center;',\r\n  'text-shadow: 1px 1px lightgray;',\r\n  ['overflow: hidden;','white-space: nowrap;','text-overflow: ellipsis;'],\r\n  'direction: rtl;',\r\n  'text-emphasis: triangle;',\r\n  'writing-mode: vertical-lr;',\r\n  'text-orientation: upright;',\r\n];\r\n\r\nexport const COLORS = [\r\n  '#ff0000',\r\n  '#ff4d00',\r\n  '#ff9900',\r\n  '#ffe600',\r\n  '#ccff00',\r\n  '#33ff00',\r\n  '#80ff00',\r\n  '#00ff19',\r\n  '#00ff66',\r\n  '#00ffb3',\r\n  '#00ffff',\r\n  '#00b2ff',\r\n  '#0066ff',\r\n  '#0019ff',\r\n  '#3300ff',\r\n  '#8000ff',\r\n  '#cc00ff',\r\n  '#ff00e5',\r\n  '#ff0099',\r\n  '#ff004d',\r\n  '#ff0000',\r\n];\r\n","import React from 'react';\r\nimport './CodeInput.css';\r\nimport { LEVELS } from './Constants';\r\n\r\ninterface CodeInputProps {\r\n  input: string;\r\n  level: number;\r\n  onInput: (input: string) => void;\r\n  onEnter: () => void;\r\n}\r\n\r\nconst CodeInput: React.FC<CodeInputProps> = ({ level, input, onInput, onEnter }) => {\r\n  const levelSize = typeof LEVELS[level - 1] === 'string' ? 1 : LEVELS[level - 1].length;\r\n\r\n  const handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const value = e.target.value.split('\\n').length > levelSize\r\n     ? e.target.value.replace(/\\n+$/, '')\r\n     : e.target.value;\r\n    onInput(value);\r\n  };\r\n\r\n  const handleKeyUp = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      onEnter();\r\n    }\r\n  };\r\n  \r\n  const renderLevelResult = (level: string | string[]) => {\r\n    if (typeof level === 'string') {\r\n      return <span key={level}>{level}</span>\r\n    } else {\r\n      return level.map(l => (\r\n        <span key={l}>{l}</span>\r\n      ));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section className=\"input-container\">\r\n      <p className=\"code-start\">\r\n        {`.phrase {`}\r\n      </p>\r\n      <p>\r\n        {LEVELS.slice(0, level - 1).map(renderLevelResult)}\r\n      </p>\r\n      {level < LEVELS.length + 1 && (\r\n        <textarea\r\n          autoFocus\r\n          placeholder=\"your style\"\r\n          value={input}          \r\n          onChange={handleInput}\r\n          onKeyUp={handleKeyUp}\r\n          rows={levelSize}\r\n          \r\n        />\r\n      )}\r\n      <p className=\"code-end\">\r\n        {`}`}\r\n      </p>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default CodeInput;\r\n","import { Locales } from \"../Languages\";\r\n\r\nconst LEVEL_DESCRIPTIONS = [\r\n  <>\r\n    <p>The <i>font-family</i> property specifies the font for an element.</p>\r\n    <p>It can be a real font, such as 'Times' or 'Arial', or a generic font, such as 'serif', 'sans-serif', or 'cursive'.</p>\r\n  </>,\r\n  <p>The <i>color</i> property is pretty straight forward: it allows you to change the font color.</p>,\r\n  <p>The <i>font-size</i> property is also one of the most common ones, it is used to change the size of the letters in your text.</p>,\r\n  <>\r\n    <p>The <i>text-transform</i> property allows you to change the case of the text, without changing the text itself.</p>\r\n    <p>This removes the necessity to use a <i>.toUpperCase()</i> on JavaScript for example.</p>\r\n  </>,\r\n  <>\r\n    <p>The <i>font-kerning</i> property is not very famous but can fix a very annoying bug that we find sometimes.</p>\r\n    <p>It controls the usage of the kerning information stored in a font, which is the space some letters overlap one another in some fonts.</p>\r\n  </>,\r\n  <p>The <i>font-variant-caps</i> property is how you can use the <i>small caps</i> from the font you are using, which is tipically a form of the uppercase letters, but reduced in size.</p>,\r\n  <p>The <i>font-weight</i> property allows you to change the weight of a text, making it bolder or lighter.</p>,\r\n  <p>The <i>font-style</i> property is a way to changing the style, allowing you to set it to italic, for example.</p>,\r\n  <p>The <i>text-decoration</i> property may have a broad naming, but it can be mostly used to add a line under/over/through the text.</p>,\r\n  <p>The <i>letter-spacing</i> property allows you to change the spacing between each character of your text.</p>,\r\n  <p>The <i>word-spacing</i> property, on the other hand, allows you to change the space between each word of the text, and not each character.</p>,\r\n  <p>The <i>line-height</i> property lets you define the height of each line of the text.</p>,\r\n  <p>The <i>text-indent</i> property is how you can add an identation to your text only on the first line.</p>,\r\n  <>\r\n    <p>The <i>text-align</i> property is how you can change the alignment of your text.</p>\r\n    <p>This property allows you to align on the <i>left</i>, <i>right</i>, <i>center</i> or <i>justify</i> your text.</p>\r\n  </>,\r\n  <p>The <i>text-shadow</i> property is the way of adding a shadow to your text. It works similarly to the <i>box-shaddow</i> property.</p>,\r\n  <>\r\n    <p>The <i>text-overflow</i> property is how you add a proper content for the overflowing text, such as the ellipsis.</p>\r\n    <p>This must be used with the <i>overflow: hidden</i> and <i>white-space: nowrap</i> to have any effect, but will allow you to use a proper ellipsis on the overflow text without the necessity of any JavaScript parsing.</p>\r\n  </>,\r\n  <p>The <i>direction</i> property will define in which direction the text goes, being it <i>ltr</i> (left to right) or <i>rtl</i> (right to left).</p>,\r\n  <>\r\n    <p>The <i>text-emphasis</i> property allows you to add emphasis on each character of the text.</p>\r\n    <p>This property enables using <i>circle</i>, <i>triangle</i>, a character, and even define it's color.</p>\r\n  </>,\r\n  <p>The <i>writing-mode</i> property will give you the chance to change the flow of the text from horizontal to vertical.</p>,\r\n  <>\r\n    <p>The <i>text-orientation</i> property only affects vertical texts, and it's the way of deciding the direction of each character.</p>\r\n    <p>With this, you'll be able to have the text of vertical without rotating the characters.</p>\r\n  </>,\r\n];\r\n\r\nconst MOBILE_WARNING = 'This app may not work properly in mobile devices. Try playing it on desktop for a better experience.';\r\n\r\nconst NO_LEVEL_DESCRIPTION = 'This is a game about css font attributes. Can you guess the right CSS attribute to give the text on the right the new style?';\r\n\r\nconst PHRASE = `I wonder if I've been changed in the night.\r\nLet me think.\r\nWas I the same when I got up this morning?\r\nI almost think I can remember feeling a little different.\r\nBut if I'm not the same, the next question is 'Who in the world am I?' Ah, that's the great puzzle!`;\r\n\r\nconst en: Locales = {\r\n  LEVEL_DESCRIPTIONS,\r\n  MOBILE_WARNING,\r\n  NO_LEVEL_DESCRIPTION,\r\n  START_BUTTON: 'Start',\r\n  NEXT_BUTTON: 'Next',\r\n  CHECK_BUTTON: 'Check',\r\n  GIVE_SOLUTION_BUTTON: 'Give me the solution',\r\n  YOU_WON: 'You won!',\r\n  WAS_WRONG: 'You got it wrong. Try again',\r\n  CHANGE_STYLE: 'Try to change the style to look like this',\r\n  HOVER_TO_SEE: 'Hover the text to see previous version',\r\n  PHRASE,\r\n};\r\n\r\nexport default en;\r\n","import { Locales } from \"../Languages\";\r\n\r\nconst LEVEL_DESCRIPTIONS = [\r\n  <>\r\n    <p>A propriedade <i>font-family</i> é utilizada para especificar a fonte de um elemento.</p>\r\n    <p>Pode-se usar o nome de uma fonte, como 'Times' ou 'Arial', ou uma fonte genérica, como 'serif', 'sans-serif' ou 'cursive'.</p>\r\n  </>,\r\n  <p>A propriedade <i>color</i> é bastante intuitiva: permite alterar a cor do texto.</p>,\r\n  <p>A propriedade <i>font-size</i> também é uma das mais comuns, é utilizada para alterar o tamanho das letras no seu texto.</p>,\r\n  <>\r\n    <p>A propriedade <i>text-transform</i> permite que você altere a \"caixa\" do texto, entre maiúsculas ou minúsculas, por exemplo, sem mudar o texto em si.</p>\r\n    <p>Essa propriedade remove a necessidade de utilizar a função <i>.toUpperCase()</i> no JavaScript por exemplo.</p>\r\n  </>,\r\n  <>\r\n    <p>A propriedade <i>font-kerning</i> não é tão famosa, mas pode resolver um problema chato que encontramos as vezes.</p>\r\n    <p>Ela controla o uso da informação de kerning contida nas fontes, que é por sua vez o expaço em que uma letra sobrepões a outra.</p>\r\n  </>,\r\n  <p>A propriedade <i>font-variant-caps</i> é como você pode usar o <i>small caps</i> da fonte que está utilizando, na qual é tipicamente uma forma das letras em maiúsculo, mas reduzidas em tamanho.</p>,\r\n  <p>A propriedade <i>font-weight</i> permite mudar a largura das letras, deixando-as mais ou menos negrito.</p>,\r\n  <p>A propriedade <i>font-style</i> é uma forma de alterar o estilo da fonte, permitindo deixá-la em itálico ou mais obliqua, por exemplo.</p>,\r\n  <p>A propriedade <i>text-decoration</i> pode ter um nome genérico, mas é utilizado principalmente para adicionar sublinhado, ou texto sobre o texto.</p>,\r\n  <p>A propriedade <i>letter-spacing</i> permite alterar o espaçamento entre cada caractere do seu texto.</p>,\r\n  <p>A propriedade <i>word-spacing</i>, por outro lado, permite você alterar o espaço entre cada palavra do texto, e não cada caractere.</p>,\r\n  <p>A propriedade <i>line-height</i> permite você alterar a altura de cada linha do texto.</p>,\r\n  <p>A propriedade <i>text-indent</i> é como você pode adicionar uma identação ao seu texto na primeira linha.</p>,\r\n  <>\r\n    <p>A propriedade <i>text-align</i> é como você pode alterar o alinhamento de seu texto.</p>\r\n    <p>Esta propriedade permite você alinhar seu texto na esquerda (<i>left</i>), direita (<i>right</i>), centro (<i>center</i>) ou justificado (<i>justify</i>).</p>\r\n  </>,\r\n  <p>A propriedade <i>text-shadow</i> é uma forma de adicionar sombra no seu texto. Funciona de forma similar a propriedade <i>box-shaddow</i>.</p>,\r\n  <>\r\n    <p>A propriedade <i>text-overflow</i> é como você consegue ajustar o conteúdo corretamente em textos que excedem o tamanho permitido.</p>\r\n    <p>Esta propriedade deve ser utilizada juntamente com <i>overflow: hidden</i> and <i>white-space: nowrap</i> para ter efeito, e permitirá você utilizar reticências no texto excedido sem a necessidade de utilizar JavaScript.</p>\r\n  </>,\r\n  <p>A propriedade <i>direction</i> irá definir qual a direção o texto segue, sendo <i>ltr</i> (esquerda para direita) ou <i>rtl</i> (direita para esquerda).</p>,\r\n  <>\r\n    <p>A propriedade <i>text-emphasis</i> permite você adicionar ênfase em cada caractere do texto.</p>\r\n    <p>Ela habilita você a usar <i>círculos</i>, <i>triangulos</i>, ou qualquer caractere, e até definir sua cor.</p>\r\n  </>,\r\n  <p>A propriedade <i>writing-mode</i> te dará a chance de alterar como o fluxo de texto é disposto, alterando entre horizontal e vertical.</p>,\r\n  <>\r\n    <p>A propriedade <i>text-orientation</i> irá afetar apenas textos na vertical e é uma forma de decidir a direção de cada caractere.</p>\r\n    <p>Com isso você poderá ter seu texto na vertical sem ter os caracteres rotacionados.</p>\r\n  </>,\r\n];\r\n\r\nconst MOBILE_WARNING = 'Este jogo pode não funcionar muito bem em dispositivos móveis. Tente jogá-lo em um desktop.';\r\n\r\nconst NO_LEVEL_DESCRIPTION = 'Este é um jogo sobre atributos de fontes no CSS. Você consegue adivinhar os atributos corretos para atualizar o estado do texto ao lado?';\r\n\r\nconst PHRASE = `Será que fui eu que mudei à noite? Deixe-me pensar: eu era a mesma quando me levantei hoje de manhã? Estou quase achando que posso me lembrar de me sentir um pouco diferente. Mas se eu não sou a mesma, a próxima pergunta é: \"Quem é que eu sou?\". Ah, este é o grande enigma!`;\r\n\r\nconst pt: Locales = {\r\n  LEVEL_DESCRIPTIONS,\r\n  MOBILE_WARNING,\r\n  NO_LEVEL_DESCRIPTION,\r\n  START_BUTTON: 'Iniciar',\r\n  NEXT_BUTTON: 'Próximo',\r\n  CHECK_BUTTON: 'Verificar',\r\n  GIVE_SOLUTION_BUTTON: 'Quero a resposta',\r\n  YOU_WON: 'Você venceu!',\r\n  WAS_WRONG: 'Você errou. Tente novamente.',\r\n  CHANGE_STYLE: 'Tente mudar o estilo para que o texto fique assim',\r\n  HOVER_TO_SEE: 'Passe o mouse por cima para ver a versão anterior',\r\n  PHRASE,\r\n};\r\n\r\nexport default pt;\r\n","import { Languages, Locales } from \"./Languages\";\r\nimport en from './locales/en';\r\nimport pt from './locales/pt';\r\n\r\nconst useLabels = (language: Languages = 'EN'): Locales => {\r\n  if (language === 'PT') {\r\n    return pt;\r\n  }\r\n\r\n  return en;\r\n}\r\n\r\nexport { useLabels };\r\n","import React, { useEffect, useState } from 'react';\r\nimport './LevelManager.css';\r\nimport CodeInput from './CodeInput';\r\nimport { LEVELS, COLORS } from './Constants';\r\nimport { Languages } from './Languages';\r\nimport { useLabels } from './useLabels';\r\n\r\ninterface LevelManagerProps {\r\n  language: Languages;\r\n  level: number;\r\n  onNext: () => void;\r\n  onPrevious: () => void;\r\n}\r\n\r\nconst LevelManager: React.FC<LevelManagerProps> = ({ level, language, onNext, onPrevious}) => {\r\n  const [input, setInput] = useState<string>('');\r\n  const [showResult, setShowResult] = useState<boolean>(false);\r\n  const [wasWrong, setWasWrong] = useState<boolean>(false);\r\n  const {\r\n    LEVEL_DESCRIPTIONS,\r\n    NO_LEVEL_DESCRIPTION,\r\n    START_BUTTON,\r\n    NEXT_BUTTON,\r\n    CHECK_BUTTON,\r\n    GIVE_SOLUTION_BUTTON,\r\n    YOU_WON,\r\n  } = useLabels(language);\r\n\r\n\r\n  const won = level === LEVELS.length && showResult;\r\n\r\n  useEffect(() => {\r\n    document.documentElement.style.setProperty('--neon', COLORS[level]);\r\n  }, [level]);\r\n\r\n  const handleNext = () => {\r\n    if (won) return;\r\n    \r\n    setShowResult(false);\r\n    setInput('');\r\n    onNext();\r\n  }\r\n\r\n  const handlePrevious = () => {\r\n    setShowResult(false);\r\n    setInput('');\r\n    onPrevious();\r\n  }\r\n\r\n  const compareWords = (first: string, second: string): boolean => {\r\n    const parsedInput = first.replaceAll(' ', '').replace(';', '').toUpperCase();\r\n    const parsedValidResult = second.replaceAll(' ', '').replace(';', '').toUpperCase();\r\n\r\n    return parsedInput === parsedValidResult;\r\n  }\r\n\r\n  const isValid = (): boolean => {\r\n    const result = LEVELS[level - 1];\r\n    if (typeof result === 'string') {\r\n      return compareWords(input, result);\r\n    } else {\r\n      const lines = input.split('\\n');\r\n      return result.every(r => lines.some(l => compareWords(r, l)));\r\n    }\r\n  }\r\n\r\n  const handleValidate = () => {\r\n    if (won || !input) return;\r\n\r\n    if (showResult) {\r\n      handleNext();\r\n      return;\r\n    }\r\n\r\n    if (isValid()) {\r\n      setWasWrong(false);\r\n      setShowResult(true);\r\n    } else {\r\n      setWasWrong(true);\r\n    }\r\n  };\r\n\r\n  const handleHelp = () => {\r\n    const result = LEVELS[level - 1];\r\n    setInput(typeof result === 'string' ? result : result.join('\\n'));\r\n    setShowResult(true);\r\n    setWasWrong(false);\r\n  };\r\n\r\n  const handleInput = (input: string) => {\r\n    setInput(input);\r\n    setWasWrong(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <section className=\"level-description\">\r\n        <div>\r\n          {level === 0 && NO_LEVEL_DESCRIPTION}\r\n          {level > 0 && showResult && LEVEL_DESCRIPTIONS[level - 1]}\r\n        </div>\r\n      </section>\r\n      {wasWrong && <p>You got it wrong. Try again</p>}\r\n      {level === 0 && (\r\n        <section className=\"buttons\">\r\n          <button onClick={handleNext}>{START_BUTTON}</button>\r\n        </section>\r\n      )}\r\n      {level > 0 && (\r\n        <>\r\n          <CodeInput input={input} onInput={handleInput} level={level} onEnter={handleValidate} />\r\n          <section className=\"buttons\">\r\n            {level > 0 && <button className=\"arrow\" onClick={handlePrevious}>{'<'}</button>}\r\n            {!showResult ? (\r\n              <button onClick={handleValidate}>{CHECK_BUTTON}</button>\r\n            ) : (\r\n              <button onClick={handleNext}>{won ? YOU_WON : NEXT_BUTTON}</button>\r\n            )}\r\n            {level < LEVELS.length && <button className=\"arrow\" onClick={handleNext}>{'>'}</button>}\r\n          </section>\r\n          {!won && (\r\n            <button className=\"help-buton\" onClick={handleHelp}>{GIVE_SOLUTION_BUTTON}</button>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LevelManager;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport './Phrase.css';\r\nimport { Languages } from './Languages';\r\nimport { useLabels } from './useLabels';\r\n\r\ninterface PhraseProps {\r\n  level?: number;\r\n  language: Languages;\r\n}\r\n\r\nconst Phrase: React.FC<PhraseProps> = ({ language, level = 0 }) => {\r\n  const levels = Array.from({length: level}, (_, i) => `level${i + 1}`);\r\n  const classes = classNames(levels);\r\n  const { PHRASE } = useLabels(language);\r\n\r\n  return (\r\n    <p className={classes}>\r\n      {PHRASE}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default Phrase;","import React from 'react';\r\nimport './PhraseContainer.css';\r\nimport Phrase from './Phrase';\r\nimport { Languages } from './Languages';\r\nimport { useLabels } from './useLabels';\r\n\r\ninterface PhraseContainerProps {\r\n  level: number;\r\n  language: Languages;\r\n}\r\n\r\nconst PhraseContainer: React.FC<PhraseContainerProps> = ({ level, language }) => {\r\n  const { HOVER_TO_SEE, CHANGE_STYLE } = useLabels(language);\r\n\r\n  return (\r\n    <section className=\"phrase-container\">\r\n      {level > 0 && (\r\n        <div className=\"phrase-container-tip phrase-top-tip\">\r\n          {CHANGE_STYLE}\r\n        </div>\r\n      )}\r\n      <div className=\"phrase\">\r\n        <div className=\"previous\">\r\n          <Phrase language={language} level={level > 0 ? level - 1 : level} />\r\n        </div>\r\n        <div className=\"current\">\r\n          <Phrase language={language} level={level} />\r\n        </div>\r\n      </div>\r\n      {level > 0 && (\r\n        <div className=\"phrase-container-tip phrase-bottom-tip\">\r\n          {HOVER_TO_SEE}\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default PhraseContainer;\r\n","import React, { useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport './App.css';\nimport { Languages } from './Languages';\nimport LevelManager from './LevelManager';\nimport PhraseContainer from './PhraseContainer';\nimport { useLabels } from './useLabels';\n\nconst App: React.FC = () => {\n  const [level, setLevel] = useState<number>(0);\n  const [language, setLanguage] = useState<Languages>('EN');\n  const { MOBILE_WARNING } = useLabels(language);\n\n  const onPrevious = () => setLevel(level - 1);\n\n  const onNext = () => setLevel(level + 1);\n\n  const getLanguageClass = (lang: Languages) => {\n    return language === lang ? 'selected' : undefined;\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-content\">\n        <h2 className=\"title\">Font Challenge</h2>\n        {isMobile && (\n          <p className=\"mobile\">\n            {MOBILE_WARNING}\n          </p>\n        )}\n        <LevelManager language={language} level={level} onNext={onNext} onPrevious={onPrevious} />\n        <div className=\"links\">\n          <a href=\"https://cgreinhold.dev\">cgreinhold.dev</a> • <a href=\"https://github.com/CGReinhold/font-game\">Github</a>\n        </div>\n        <div className=\"game-languages\">\n          <button className={getLanguageClass('EN')} onClick={() => setLanguage('EN')}>EN</button>\n          <button className={getLanguageClass('PT')} onClick={() => setLanguage('PT')}>PT</button>\n        </div>\n      </div>\n      <PhraseContainer level={level} language={language} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}